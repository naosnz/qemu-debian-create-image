#!/bin/bash

set -e

# Example usage:
# - use local APT cache, and set-up serial console
#   MIRROR="http://localhost:9999/debian" GRUB_CMDLINE="console=tty0 console=ttyS0" ./qemu-debian-create-image foo.img myhostname stretch
# - use local APT cache, and set-up serial console, no network interface configuration (default is DHCP)
#   MIRROR="http://localhost:9999/debian" GRUB_CMDLINE="console=tty0 console=ttyS0" ETH_DEVICE="no" ./qemu-debian-create-image foo.img myhostname stretch
# Then start with:
#  kvm -hda foo.img -net nic -net user -m 256 -serial stdio

# Configs overwritable via environment variables
VSYSTEM=${VSYSTEM:=qemu}						# Either 'qemu' or 'kvm'
FLAVOUR=${FLAVOUR:=debian}					# Either 'debian' or 'ubuntu'
INCLUDES=${INCLUDES:="less,vim,sudo,openssh-server"}
MIRROR=${MIRROR:="http://deb.debian.org/debian"}
#MIRROR=${MIRROR:="http://localhost:3142/debian"}
#MIRROR=${MIRROR:="http://archive.ubuntu.com/ubuntu/"}
#MIRROR=${MIRROR:="http://localhost:3142/ubuntu"}
ARCH=${ARCH:=amd64}
APT_CACHER=${APT_CACHER:=no}
IMGSIZE=${IMGSIZE:=8G}
ROOTPASSWD=${ROOTPASSWD:=root}
DISKNAME=${DISKNAME:=sda}
GRUB_CMDLINE=${GRUB_CMDLINE:=quiet}
ETH_DEVICE=${ETH_DEVICE:=ens3}

# Optional additional setup script, run with path to chroot and disk image
EXTRA_SETUP=${EXTRA_SETUP:=}

clean_debian() {
	([ "$MNT_DIR" != "" ] && sudo chroot $MNT_DIR umount /proc/ /sys/ /dev/ /boot/) || true
	sleep 1s
	[ "$MNT_DIR" != "" ] && sudo umount $MNT_DIR
	sleep 1s
	[ "$DISK" != "" ] && sudo $VSYSTEM-nbd -d $DISK
	sleep 1s
	[ "$MNT_DIR" != "" ] && rm -r $MNT_DIR
}

fail() {
	clean_debian
	echo ""
	echo "FAILED: $1"
	exit 1
}

cancel() {
	fail "CTRL-C detected"
}

if [ $# -lt 3 ]
then
	echo "author: Kamil Trzcinski (http://ayufan.eu)"
	echo "license: GPL"
	echo "usage: $0 <image-file> <hostname> <release> [optional debootstrap args]" 1>&2
	exit 1
fi

FILE=$1
HOSTNAME=$2
RELEASE=$3
shift 3

trap cancel INT

echo "Installing $RELEASE into $FILE..."

MNT_DIR=`tempfile`
rm $MNT_DIR
mkdir $MNT_DIR
DISK=

# add apt cacher for faster rebuilds, runs on 3142
if [ "$APT_CACHER" == "yes" ]; then
    echo "Installing apt-cacher-ng for fast rebuilds"
    apt-get install apt-cacher-ng
fi

if [ ! -f $FILE ]; then
    echo "Creating $FILE"
    $VSYSTEM-img create -f qcow2 $FILE $IMGSIZE
fi

if [ $FLAVOUR == "debian" ]; then
    BOOT_PKG="linux-image-$ARCH grub-pc"
elif [ $FLAVOUR == "ubuntu" ]; then
    BOOT_PKG="linux-image-generic grub-pc"
fi

if [ `id -u` != 0 ]; then
   # Pre-activate sudo password cache if not running as root
   echo "sudo required for root commands"
   sudo true
fi

echo "Looking for nbd device..."

sudo modprobe nbd max_part=16 || fail "failed to load nbd module into kernel"

# Try /dev/nbdN in order 0, 1, 2, ... 15, ignoring partition devices (nbdNpN)
for i in $(ls /dev/nbd* | sort -n -k 3 -t d | grep -v p)
do
	if sudo $VSYSTEM-nbd -c $i $FILE 2>/dev/null
	then
		DISK=$i
		break
	fi
done

[ "$DISK" == "" ] && fail "no nbd device available"

echo "Connected $FILE to $DISK"

# New sfdisk on stretch doesn't do -D and -uM anymore
echo "Partitioning $DISK..."
sudo sfdisk $DISK -q << EOF || fail "cannot partition $FILE"
label: dos
,200M,83,*
;
EOF

echo "Creating boot partition..."
sudo mkfs.ext4 -q ${DISK}p1 || fail "cannot create /boot ext4"

echo "Creating root partition..."
sudo mkfs.ext4 -q ${DISK}p2 || fail "cannot create / ext4"

echo "Mounting root partition..."
sudo mount ${DISK}p2 $MNT_DIR || fail "cannot mount /"

echo "Installing $FLAVOUR $RELEASE..."
sudo debootstrap --include=$INCLUDES $* $RELEASE $MNT_DIR $MIRROR || fail "cannot install $RELEASE into $DISK"

echo "Configuring system..."
sudo sh -c "cat > $MNT_DIR/etc/fstab" <<EOF
/dev/${DISKNAME}1 /boot               ext4    sync 0       2
/dev/${DISKNAME}2 /                   ext4    errors=remount-ro 0       1
EOF

sudo sh -c "echo $HOSTNAME > $MNT_DIR/etc/hostname"

sudo sh -c "cat > $MNT_DIR/etc/hosts" <<EOF
127.0.0.1       localhost
127.0.1.1 		$HOSTNAME
# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF

sudo sh -c "cat > $MNT_DIR/etc/network/interfaces" <<EOF
auto lo
iface lo inet loopback
EOF
if [ "$ETH_DEVICE" != "no" ]; then
	sudo sh -c "cat > $MNT_DIR/etc/network/interfaces" <<EOF
auto ${ETH_DEVICE}
iface ${ETH_DEVICE} inet dhcp
EOF
fi

sudo mount --bind /dev/ $MNT_DIR/dev || fail "cannot bind /dev"
sudo chroot $MNT_DIR mount -t ext4 ${DISK}p1 /boot || fail "cannot mount /boot"
sudo chroot $MNT_DIR mount -t proc none /proc || fail "cannot mount /proc"
sudo chroot $MNT_DIR mount -t sysfs none /sys || fail "cannot mount /sys"
sudo sh -c "LANG=C DEBIAN_FRONTEND=noninteractive chroot $MNT_DIR apt-get install -y --force-yes -q $BOOT_PKG" || fail "cannot install $BOOT_PKG"

sudo chroot $MNT_DIR grub-install $DISK || fail "cannot install grub"
sudo sed -i "s|GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT=\"${GRUB_CMDLINE}\"|" $MNT_DIR/etc/default/grub
sudo chroot $MNT_DIR /bin/sh -c "LANG=C apt-get -y purge os-prober" || true # Don't scan other drives
sudo chroot $MNT_DIR update-grub || fail "cannot update grub"
sudo chroot $MNT_DIR apt-get clean || fail "unable to clean apt cache"

sudo sed -i "s|${DISK}p1|/dev/${DISKNAME}1|g" $MNT_DIR/boot/grub/grub.cfg
sudo sed -i "s|${DISK}p2|/dev/${DISKNAME}2|g" $MNT_DIR/boot/grub/grub.cfg

# Set root password
echo "root:${ROOTPASSWD}" | sudo chroot $MNT_DIR chpasswd

echo "Finishing grub installation..."
sudo chroot $MNT_DIR grub-install $DISK --modules="biosdisk part_msdos" --target=i386-pc || fail "cannot reinstall grub"

if [ -n "${EXTRA_SETUP}" -a -x "${EXTRA_SETUP}" ]; then
	echo "Running additional setup script: ${EXTRA_SETUP}"
	"${EXTRA_SETUP}" "${MNT_DIR}" "${DISK}"
fi

echo "SUCCESS!"
clean_debian
exit 0
